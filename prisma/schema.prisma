// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  username       String              @unique
  fullname       String
  bio            String
  password       String?
  location       String?
  profile_pic    String?
  cover_pic      String?
  email          String              @unique
  socials        Social[]
  blogs          Blog[]
  savedBlogs     Blog[]              @relation("Bookmarks", fields: [savedBlogsIDs], references: [id])
  savedBlogsIDs  String[]            @db.ObjectId
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  Like           Like[]
  following      Follow[]            @relation("Following")
  follower       Follow[]            @relation("Follower")
  blogsViewed    BLogView[]
  followedTopics FollowTopic[]
  searchHistory  UserSearchHistory[]
  comments       Comment[]

  @@index([fullname])
}

model Social {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  link   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
}

model Blog {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String     @unique
  description String
  content     Json
  thumbnail   String?
  length      Int
  isPublished Boolean
  isFeatured  Boolean    @default(false)
  author      User       @relation(fields: [authorId], references: [id], onDelete: NoAction)
  authorId    String     @db.ObjectId
  savedBy     User[]     @relation("Bookmarks", fields: [savedByIDs], references: [id])
  savedByIDs  String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIDs], references: [id])
  categoryIDs String[]   @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Like        Like[]
  BLogView    BLogView[]
  comments    Comment[]

  @@index([title, description])
}

model BLogView {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  user   User?   @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID String? @db.ObjectId
  userIP String
  blog   Blog    @relation(fields: [blogID], references: [id], onDelete: Cascade)
  blogID String  @db.ObjectId
}

model Category {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String        @unique
  color       String
  posts       Blog[]        @relation(fields: [postIDs], references: [id])
  postIDs     String[]      @db.ObjectId
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  FollowTopic FollowTopic[]
}

model Comment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  comment       String
  commentedBy   User     @relation(fields: [commentedByID], references: [id])
  post          Blog     @relation(fields: [postID], references: [id])
  postID        String   @db.ObjectId
  commentedByID String   @db.ObjectId
  createdAt     DateTime @default(now())
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  likedBy   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Blog     @relation(fields: [postID], references: [id], onDelete: Cascade)
  postID    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId

  @@unique([postID, userId])
}

model Follow {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    User   @relation(name: "Following", fields: [followerID], references: [id], onDelete: Cascade)
  followerID  String @db.ObjectId
  following   User   @relation(name: "Follower", fields: [followingID], references: [id], onDelete: Cascade)
  followingID String @db.ObjectId

  @@unique([followerID, followingID])
}

model FollowTopic {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  follower      User     @relation(fields: [followerID], references: [id], onDelete: Cascade)
  followerID    String   @db.ObjectId
  followTopic   Category @relation(fields: [followTopicID], references: [id], onDelete: Cascade)
  followTopicID String   @db.ObjectId

  @@unique([followerID, followTopicID])
}

model UserSearchHistory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  searchQuery String
  user        User     @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID      String   @db.ObjectId
  createdAt   DateTime @default(now())
}
